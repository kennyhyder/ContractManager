# backend/docker-compose.yml
version: '3.8'

services:
  # MongoDB
  mongo:
    image: mongo:6
    container_name: contract-mongo
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password}
      MONGO_INITDB_DATABASE: contract-management
    volumes:
      - mongo_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - contract-network

  # Redis
  redis:
    image: redis:7-alpine
    container_name: contract-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD:-redispassword}
    volumes:
      - redis_data:/data
    networks:
      - contract-network

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: contract-backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 5000
      MONGODB_URI: mongodb://${MONGO_ROOT_USER:-admin}:${MONGO_ROOT_PASSWORD:-password}@mongo:27017/contract-management?authSource=admin
      REDIS_URL: redis://:${REDIS_PASSWORD:-redispassword}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
      # Email config
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      SMTP_FROM: ${SMTP_FROM}
      # AWS config (optional)
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
    depends_on:
      - mongo
      - redis
    volumes:
      - ./public/uploads:/app/public/uploads
      - ./logs:/app/logs
      - ./backups:/app/backups
    networks:
      - contract-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx (optional - for production)
  nginx:
    image: nginx:alpine
    container_name: contract-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./public:/usr/share/nginx/html/public:ro
    depends_on:
      - backend
    networks:
      - contract-network

  # MongoDB Express (optional - for development)
  mongo-express:
    image: mongo-express
    container_name: contract-mongo-express
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_ROOT_USER:-admin}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_ROOT_PASSWORD:-password}
      ME_CONFIG_MONGODB_URL: mongodb://${MONGO_ROOT_USER:-admin}:${MONGO_ROOT_PASSWORD:-password}@mongo:27017/
      ME_CONFIG_BASICAUTH_USERNAME: ${ME_USERNAME:-admin}
      ME_CONFIG_BASICAUTH_PASSWORD: ${ME_PASSWORD:-pass}
    depends_on:
      - mongo
    networks:
      - contract-network
    profiles:
      - dev

  # Redis Commander (optional - for development)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: contract-redis-commander
    restart: unless-stopped
    ports:
      - "8082:8081"
    environment:
      REDIS_HOSTS: redis:redis:6379:0:${REDIS_PASSWORD:-redispassword}
    depends_on:
      - redis
    networks:
      - contract-network
    profiles:
      - dev

networks:
  contract-network:
    driver: bridge

volumes:
  mongo_data:
  redis_data: